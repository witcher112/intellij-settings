<templateSet group="C#">
  <template name="xmlctor" value="/// &lt;summary&gt;&#10;/// Initializes a new instance of the &lt;see cref=&quot;$classname$&quot;/&gt; $type$.&#10;/// &lt;/summary&gt;" description="XML Constructor Documentation" toReformat="false" toShortenFQNames="true">
    <variable name="classname" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <variable name="type" expression="&quot;class&quot;" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Bash" value="false" />
      <option name="HTML" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="validvaluestruct" value="public struct $NAME$&#10;{&#10;    public $TYPE$ Value { get; }&#10;&#10;    public $NAME$($TYPE$ value)&#10;    {&#10;        Value = value;&#10;    }&#10;&#10;    public string ValidationError&#10;    {&#10;        get&#10;        {&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public bool IsValid =&gt; ValidationError == null;&#10;&#10;    public $NAME$? ValidOrNull =&gt; IsValid ? ($NAME$?) this : null;&#10;&#10;    public static implicit operator $NAME$($TYPE$ value)&#10;    {&#10;        return new $NAME$(value);&#10;    }&#10;&#10;    public override string ToString()&#10;    {&#10;        return Value.ToString();&#10;    }&#10;}" shortcut="ENTER" description="Struct with single value with validation logic." toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="false" />
    <variable name="TYPE" expression="&quot;TYPE&quot;" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Bash" value="false" />
      <option name="HTML" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="pkexception" value="public class $NAME$ : Exception&#10;{&#10;    private static string GetMesssage($PARAMS$) =&gt;&#10;        $&quot;$MESSAGE$&quot;;&#10;&#10;    public $NAME$($PARAMS$, Exception inner = null)&#10;        : base(GetMesssage($PARAMS_USAGE$), inner)&#10;    {&#10;    }&#10;}" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="PARAMS_USAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MESSAGE" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Bash" value="false" />
      <option name="HTML" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="XML" value="false" />
    </context>
  </template>
</templateSet>